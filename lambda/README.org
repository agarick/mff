* lambda

=lambda.pl= is an untyped lambda-calculus interpreter written in Prolog.

- Run ::
  - Either =swipl lambda.pl= to interact in a REPL-like fashion,
  - Or =echo '\x.x' | swipl lambda.pl= to interpret the piped input.

- Test ::
  - =sh test.sh=

- Dependencies ::
  - swi-prolog
  - bash (only for test)

- Calculus characterisation ::
  - Untyped
  - Greedy left-associative body (ie. =\x. x y z= means =\x. ((x y) z)=)
  - Normal-order evaluation

- Input syntax ::
  - Term
    - Either a variable, an application, or an abstraction.
  - Variable, "=sym="
    - Denoted by any combination of printable ascii characters, except the special characters [ =\. ()= ].
  - Application, "=app="
    - Denoted by =term term= or =term)term=, etc., ie. separation of two terms by space (ie. the ascii single-space character) or a parenthesis.
    - Can be grouped using parentheses.
  - Abstraction, "=fun="
    - Denoted by =\sym.term=.
    - Only one variable allowed per abstraction. For example, =\x y.z= fails to parse.
  - Whitespace
    - Except for the delimitation of variables, whitespace is optional. For instance, =\ x . x ( y z )= is the same as =\x.x(y z)=.
  - Parentheses
    - Parentheses are optional. See /Calculus characterisation/ to see how the interpreter behaves implicitly.

- Process ::
  - The interpreter performs the following sequence of steps, where the result of each step is printed if it succeeds:
    1. =token=: Input is read into a list of tokens.
    1. =tree=: Parentheses are recognised to build a tree of tokens.
    1. =data=: Other special characters are recognised to build a compound data structure tree.
    1. =reduce=: Renaming and substitutions are recursively performed on the data structure.
    1. =atad=: The reduced data structure is converted all the way back to a string that is in the canonical input syntax.
  - Reduction on divergent expressions may enter an infinite loop and cause the interpreter to hang.
